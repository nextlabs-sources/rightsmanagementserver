<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE xml>
<project name="build_compile_kms" default="all" basedir=".">

	<property name="nlbuildroot" value="${basedir}/../../.." />	
	<!-- Propery files -->
	<property environment="env" />
	<property file="${basedir}/build-kms.properties" />

	<!-- Global properties -->
	<property name="package_dir" value="${build_dir}/${package_name}" />
	<property name="package_dir_test" value="${build_dir}/${package_name_test}" />

	<property name="dist_SC_zip_file_name" value="${package_KMS}-WAR-${version_rms_str}-${version_build_short}-${build_date_long}.zip" />

	<!-- Dump properties -->
	<echoproperties />

	<echo message="INFO: Dump properties completed" />

	<!-- Sanity checks -->
	<fail message="kms.root is not set" unless="kms.root" />
	<fail message="kms.root is empty">
		<condition>
			<equals arg1="${kms.root}" arg2="" trim="true" />
		</condition>
	</fail>
	<available file="${kms.root}" type="dir" property="local.kms.root_exists" />
	<fail message="kms.root directory does not exist - ${kms.root}" unless="local.kms.root_exists" />

	<echo message="INFO: Sanity check completed (no error)" />

	<path id="classpath.hibernate">
		<fileset dir="${hibernatelibdir}" includes="*.jar" />
	</path>
	<path id="classpath.log4j">
		<fileset dir="${log4jlibdir}" includes="*.jar" />
	</path>
	<path id="classpath.restlet">
		<fileset dir="${restletlibdir}" includes="*.jar" />
	</path>
	<path id="classpath.servlet">
		<fileset dir="${servletlibdir}" includes="*.jar" />
	</path>
	<path id="classpath.slf4j">
		<fileset dir="${slf4jlibdir}" includes="*.jar" />
	</path>
	<path id="classpath.spring">
		<fileset dir="${springlibdir}" includes="*.jar" />
	</path>
	<path id="classpath.jaxb">
		<fileset dir="${jaxblibdir}" includes="*.jar" />
	</path>
	<path id="classpath.commons">
		<fileset dir="${commonslibdir}" includes="*.jar" />
	</path>
	<path id="classpath.c3p0">
		<fileset dir="${c3p0libdir}" includes="*.jar" />
	</path>
	<path id="classpath.kms">
		<fileset dir="${kmslibdir}" includes="*.jar" />
	</path>
	<path id="classpath.sharedutil">
		<fileset dir="${sharedutillibdir}" includes="*.jar" />
	</path>

	<!-- Global tasks -->
	<tstamp>
		<format property="local.now" pattern="EEE, d MMM yyyy HH:mm:ss Z" />
	</tstamp>

	<echo message="version_str = ${version_str}" />
	<echo message="time = ${local.now}" />

	<!-- Targets -->

	<target name="all" description="Default for all" depends="clean, compile, installer-lib, war, package, copy-artifacts-to-staging" />

	<target name="clean" description="Delete all build artifacts" depends="">
		<delete includeemptydirs="true" dir="${build_dir}" />
	</target>

	<taskdef name="xjc" classname="com.sun.tools.xjc.XJC2Task">
		<classpath>
			<path refid="classpath.jaxb" />
		</classpath>
	</taskdef>

	<target name="xjctobeans">
		<echo>Compiling xml schemas</echo>
		<property name="xjc_root" value="${build_dir}/xjc" />
		<property name="xjc_src" value="${xjc_root}/src" />
		<property name="xjc_dest" value="${xjc_root}/classes" />

		<delete dir="${xjc_root}" quiet="true" />
		<mkdir dir="${xjc_src}" />
		<mkdir dir="${xjc_dest}" />
		<xjc destdir="${xjc_src}">
			<schema dir="${xmlbeans_schemas_dir}" includes="**/*.xsd" />
		</xjc>
		<javac srcdir="${xjc_src}" destdir="${xjc_dest}" debug="${env.RMS_DEV_BUILD}" encoding="UTF-8">
			<classpath refid="classpath.jaxb" />
		</javac>
		<jar destfile="${build_dir}/${package_name}_xmlbeans.jar" basedir="${xjc_dest}" />
		<copy todir="${kmslibdir}">
			<fileset dir="${build_dir}" casesensitive="yes">
				<include name="${package_name}_xmlbeans.jar" />
			</fileset>
		</copy>
	</target>
	
	<target name="build_stage_kms_xml_beans" description="Compile KMS XML beans and copy to staging" depends="clean, xjctobeans">
		<copy todir="${staging.dir}" overwrite="true">
			<fileset file="${build_dir}/${package_name}_xmlbeans.jar" />
		</copy>
	</target>
	
	<target name="copy-artifacts-from-staging">
		<copy todir="${sharedutillibdir}" overwrite="true">
			<fileset file="${staging.dir}/RMSUtil.jar" />
		</copy>
	</target>
	
	<target name="installer-lib" description="Copies the necessary libraries for installer" depends="compile">		
		<copy file="${commonslibdir}/commons-io-2.4.jar" todir="${build_dir}"/>		
		<copy file="${log4jlibdir}/log4j-1.2.17.jar" todir="${build_dir}"/>
		<copy file="${slf4jlibdir}/slf4j-api-1.7.13.jar" todir="${build_dir}"/>
		<copy file="${slf4jlibdir}/slf4j-log4j12-1.7.13.jar" todir="${build_dir}"/>
		<copy file="${restletlibdir}/org.restlet-2.3.5.jar" todir="${build_dir}"/>
		<copy file="${restletlibdir}/org.restlet.ext.jaxb-2.3.5.jar" todir="${build_dir}"/>
		<copy file="${sharedutillibdir}/RMEncryptionUtil.jar" todir="${build_dir}"/>
	</target>

	<target name="compile" description="Compile the project" depends="clean, xjctobeans, copy-artifacts-from-staging">
		<mkdir dir="${classes_dir}" />
		<javac srcdir="${src_dir}" destdir="${classes_dir}" debug="${env.RMS_DEV_BUILD}" encoding="UTF-8">
			<classpath refid="classpath.hibernate" />
			<classpath refid="classpath.log4j" />
			<classpath refid="classpath.servlet" />
			<classpath refid="classpath.slf4j" />
			<classpath refid="classpath.spring" />
			<classpath refid="classpath.restlet" />
			<classpath refid="classpath.commons" />
			<classpath refid="classpath.c3p0" />
			<classpath refid="classpath.sharedutil" />
			<classpath>
				<filelist files="${build_dir}/${package_name}_xmlbeans.jar" />
			</classpath>
		</javac>

		<echo>Copying language resource files...</echo>
		<copy todir="${langresource.target}">
			<fileset dir="${langresource.src}" casesensitive="yes">
				<include name="**/*.properties" />
			</fileset>
		</copy>
		<echo>End of Copying language resource files...</echo>
		<jar destfile="${build_dir}/${package_name}.jar">
			<fileset dir="${classes_dir}" />
			<manifest>
				<attribute name="Java-Version" value="${java.version}" />
				<attribute name="Implementation-Vendor" value="NextLabs, Inc." />
				<attribute name="Implementation-Title" value="${product_name}" />
				<attribute name="Implementation-Version" value="${version_str} (${build_number})" />
				<attribute name="Implementation-Time" value="${local.now}" />
			</manifest>
		</jar>
	</target>

	<target name="checkDevBuild">
		<condition property="isNotDevBuild" value="false">
			<not>
				<istrue value="true" />
			</not>
		</condition>
	</target>

	<target name="war" depends="compile">
		<delete includeEmptyDirs="true">
			<fileset dir="${build_dir}">
				<include name="${package_name}.war" />
			</fileset>
		</delete>

		<echo>Creating ${package_name}.war</echo>
		<war destfile="${build_dir}/${package_name}.war" basedir="${kms.root}/web" webxml="${kms.root}/web/WEB-INF/web.xml" duplicate="preserve">
			<lib dir="${build_dir}" includes="${package_name}.jar" />
			<lib dir="${sharedutillibdir}" includes="*.jar" />
			<lib dir="${hibernatelibdir}" includes="*.jar" />
			<lib dir="${log4jlibdir}" includes="*.jar" />
			<lib dir="${slf4jlibdir}" includes="*.jar" />
			<lib dir="${springlibdir}" includes="*.jar" />
			<lib dir="${restletlibdir}" includes="*.jar" />
			<lib dir="${commonslibdir}" includes="*.jar" />
			<lib dir="${c3p0libdir}" includes="*.jar" />
			<lib dir="${build_dir}" includes="${package_name}.jar" />
			<lib dir="${build_dir}" includes="${package_name}_xmlbeans.jar" />
			<classes dir="${conf.dir}" includes="*.properties" />
			<lib dir="${jdbclibdir}/hsql" includes="*.jar" />
			<lib dir="${jdbclibdir}/mssql" includes="*.jar" />
			<lib dir="${jdbclibdir}/mysql" includes="*.jar" />
			<lib dir="${jdbclibdir}/oracle" includes="*.jar" />
		</war>
	</target>

	<target name="package" description="builds each module">
		<mkdir dir="${package_dir}" />
		<copy todir="${package_dir}" overwrite="true">
			<fileset file="${build_dir}/*.war" />
		</copy>
		<zip destfile="${build_dir}/${dist_SC_zip_file_name}" encoding="UTF-8">
			<fileset dir="${build_dir}/${package_name}/">
				<include name="*.*" />
			</fileset>
		</zip>
	</target>

	<target name="copy-artifacts-to-staging" depends="package">
		<copy todir="${staging.dir}" overwrite="true">
			<fileset file="${build_dir}/*.jar" />
			<fileset file="${build_dir}/*.war" />
			<fileset file="${build_dir}/*.zip" />
		</copy>
	</target>
	
	<target name="deploy">
		<copy file="${build_dir}/${package_name}.war" todir="${war.dir}" />
	</target>
</project>
